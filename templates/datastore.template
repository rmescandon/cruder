// -*- Mode: Go; indent-tabs-mode: t -*-

/*
 * Copyright (C) 2017 Roberto Mier Escandon <rmescandon@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package datastore

import (
	"database/sql"
	"fmt"
)

const create_#TYPE#_TableSQL = `
	CREATE TABLE IF NOT EXISTS _#TYPE.LOWERCASE#_ (
		_#ID.FIELD.DDL#_
		_#FIELDS.DDL#_
	)
`

const list_#TYPE#_sSQL = "select _#ID.FIELD.NAME.LOWERCASE#_, _#FIELDS.DML#_ from _#TYPE.LOWERCASE#_ order by _#ID.FIELD.NAME.LOWERCASE#_"
const get_#TYPE#_SQL = "select _#ID.FIELD.NAME.LOWERCASE#_, _#FIELDS.DML#_ from _#TYPE.LOWERCASE#_ where _#ID.FIELD.NAME.LOWERCASE#_=$1"
const find_#TYPE#_SQL = "select _#ID.FIELD.NAME.LOWERCASE#_, _#FIELDS.DML#_ from _#TYPE.LOWERCASE#_ where _#FIND.FIELD.NAME#_ like '%$1%'"
const create_#TYPE#_SQL = "insert into _#TYPE.LOWERCASE#_ (_#FIELDS.DML#_) values (_#VALUES.DML.PARAMS#_) returning _#ID.FIELD.NAME.LOWERCASE#_"
const update_#TYPE#_SQL = "update _#TYPE.LOWERCASE#_ set _#FIELDS.DML.PARAMS#_ where _#ID.FIELD.DML.PARAM#_"
const delete_#TYPE#_SQL = "delete from _#TYPE.LOWERCASE#_ where _#ID.FIELD.NAME.LOWERCASE#_=$1"

// Create_#TYPE#_Table creates the database table
func (db *DB) Create_#TYPE#_Table() error {
	_, err := db.Exec(create_#TYPE#_TableSQL)
	return err
}

// List_#TYPE#_s returns all the registers of the table
func (db *DB) List_#TYPE#_s() ([]_#TYPE#_, error) {
	rows, err := db.Query(list_#TYPE#_sSQL)
	if err != nil {
		return []_#TYPE#_{}, fmt.Errorf("Error retrieving database users: %v", err)
	}
	defer rows.Close()

	return db.rowsTo_#TYPE#_s(rows)
}

// Get_#TYPE#_ returns a specific register
func (db *DB) Get_#TYPE#_(_#ID.FIELD.NAME.LOWERCASE#_ _#ID.FIELD.TYPE#_) (_#TYPE#_, error) {
	row := db.QueryRow(get_#TYPE#_SQL, _#ID.FIELD.NAME.LOWERCASE#_)
	_#TYPE.IDENTIFIER#_, err := db.rowTo_#TYPE#_(row)
	if err != nil {
		return _#TYPE#_{}, fmt.Errorf("Error retrieving _#TYPE.LOWERCASE#_ register: %v", err)
	}
	return _#TYPE.IDENTIFIER#_, err
}

// Find_#TYPE#_ searches for a specific register
func (db *DB) Find_#TYPE#_(query string) (_#TYPE#_, error) {
	row := db.QueryRow(find_#TYPE#_SQL, query)
	_#TYPE.IDENTIFIER#_, err := db.rowTo_#TYPE#_(row)
	if err != nil {
		return _#TYPE#_{}, fmt.Errorf("Error searching _#TYPE.LOWERCASE#_ registers: %v", err)
	}
	return _#TYPE.IDENTIFIER#_, err
}

// Create_#TYPE#_ Inserts a new register
func (db *DB) Create_#TYPE#_(_#TYPE.IDENTIFIER#_ _#TYPE#_) (_#ID.FIELD.TYPE#_, error) {
	var _#ID.FIELD.NAME.LOWERCASE#_ _#ID.FIELD.TYPE#_
	err := db.QueryRow(create_#TYPE#_SQL, _#FIELDS.ENUM#_).Scan(&_#ID.FIELD.NAME.LOWERCASE#_)
	if err != nil {
		return -1, fmt.Errorf("Error creating _#TYPE.LOWERCASE#_ register: %v", err)
	}
	return _#ID.FIELD.NAME.LOWERCASE#_, nil
}

// Update_#TYPE#_ updates a register
func (db *DB) Update_#TYPE#_(_#ID.FIELD.NAME.LOWERCASE#_ _#ID.FIELD.TYPE#_, _#TYPE.IDENTIFIER#_ _#TYPE#_) error {
	_, err := db.Exec(update_#TYPE#_SQL, _#FIELDS.ENUM#_, _#ID.FIELD.NAME.LOWERCASE#_)
	if err != nil {
		return fmt.Errorf("Error updating _#TYPE.LOWERCASE#_ register: %v", err)
	}
	return nil
}

// Delete_#TYPE#_ deletes a register
func (db *DB) Delete_#TYPE#_(_#ID.FIELD.NAME.LOWERCASE#_ _#ID.FIELD.TYPE#_) error {
	_, err := db.Exec(delete_#TYPE#_SQL, _#ID.FIELD.NAME.LOWERCASE#_)
	if err != nil {
		return fmt.Errorf("Error deleting _#TYPE.LOWERCASE#_ register: %v", err)
	}
	return nil
}

func (db *DB) rowTo_#TYPE#_(row *sql.Row) (_#TYPE#_, error) {
	_#TYPE.IDENTIFIER#_ := _#TYPE#_{}
	err := row.Scan(&_#TYPE.IDENTIFIER#_._#ID.FIELD.NAME#_, _#FIELDS.ENUM.REF#_)
	if err != nil {
		return _#TYPE#_{}, err
	}

	return _#TYPE.IDENTIFIER#_, nil
}

func (db *DB) nextRowTo_#TYPE#_(rows *sql.Rows) (_#TYPE#_, error) {
	_#TYPE.IDENTIFIER#_ := _#TYPE#_{}
	err := rows.Scan(&_#TYPE.IDENTIFIER#_._#ID.FIELD.NAME#_, _#FIELDS.ENUM.REF#_)
	if err != nil {
		return _#TYPE#_{}, err
	}

	return _#TYPE.IDENTIFIER#_, nil
}

func (db *DB) rowsTo_#TYPE#_s(rows *sql.Rows) ([]_#TYPE#_, error) {
	_#TYPE.IDENTIFIER#_List := []_#TYPE#_{}

	for rows.Next() {
		_#TYPE.IDENTIFIER#_, err := db.nextRowTo_#TYPE#_(rows)
		if err != nil {
			return nil, err
		}
		_#TYPE.IDENTIFIER#_List = append(_#TYPE.IDENTIFIER#_List, _#TYPE.IDENTIFIER#_)
	}

	return _#TYPE.IDENTIFIER#_List, nil
}
