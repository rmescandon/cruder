#!/bin/sh
export LANG=C.UTF-8
export LANGUAGE=en
set -eu

export GOPATH="${GOPATH:-$(realpath "$(dirname "$0")"/../../../../)}"
export PATH="$PATH:${GOPATH%%:*}/bin"

STATIC=""
UNIT=""

case "${1:-all}" in
    all)
        STATIC="yes"
        UNIT="yes"
        ;;
    --static)
        STATIC="yes"
        ;;
    --unit)
        UNIT="yes"
        ;;
    *)
        echo "Wrong flag ${1}. To run a single suite use --static or --unit"
        exit 1
esac

CURRENTTRAP="true"
EXIT_CODE=99
store_exit_code() {
    EXIT_CODE=$?
}
exit_with_exit_code() {
    exit $EXIT_CODE
}
addtrap() {
    CURRENTTRAP="$CURRENTTRAP ; $1"
    trap 'store_exit_code; $CURRENTTRAP ; exit_with_exit_code' EXIT
}

endmsg() {
    if [ $EXIT_CODE -eq 0 ]; then
        m="All good, what could possibly go wrong."
    else
        m="Crushing failure and despair."
    fi
    echo "$m"
}
addtrap endmsg


# Append the coverage profile of a package to the project coverage.
append_coverage() {
    profile="$1"
    if [ -f "$profile" ]; then
        grep -v "^mode:" -- "$profile" >> .coverage/coverage.out
        rm "$profile"
    fi
}

echo Obtaining dependencies
./get-deps.sh

if [ ! -z "$STATIC" ]; then
    echo Checking docs
    ./mdlint.py ./*.md

    echo Checking formatting
    fmt=""
    for dir in $(go list -f '{{.Dir}}' ./... | grep -v '/vendor/' ); do
        s="$(gofmt -s -l "$dir")"
        if [ -n "$s" ]; then
            fmt="$s\n$fmt"
        fi
    done

    if [ -n "$fmt" ]; then
        echo "Formatting wrong in following files"
        echo "$fmt"
        exit 1
    fi

    # go vet
    echo Running vet
    go list ./... | grep -v '/vendor/' | xargs go vet

    # golint
    echo Install golint
    if ! which golint >/dev/null; then
        go get github.com/golang/lint/golint
    fi
    
    echo Running lint
    for dir in $(go list -f '{{.Dir}}' ./... | grep -v '/vendor/' ); do
        lint="$(golint "$dir")"
        if [ -n "$lint" ]; then
            echo "Lint complains:"
            echo "$lint"
            exit 1
        fi
    done

    if which shellcheck >/dev/null; then
        echo Checking shell scripts...
        ( git ls-files -z 2>/dev/null ||
                find . \( -name .git -o -name vendor \) -prune -o -print0 ) |
            xargs -0 file -N |
            awk -F": " '$2~/shell.script/{print $1}' |
            xargs shellcheck
        regexp='GOPATH(?!%%:\*)(?!:)[^=]*/'
        if grep -qPr --exclude HACKING.md --exclude-dir .git --exclude-dir vendor "$regexp"; then
            echo "Using GOPATH as if it were a single entry and not a list:"
            grep -PHrn -C1 --color=auto --exclude HACKING.md --exclude-dir .git --exclude-dir vendor "$regexp"
            exit 1
        fi
        unset regexp
    fi

    echo Checking spelling errors
    if ! which misspell >/dev/null; then
        go get -u github.com/client9/misspell/cmd/misspell
    fi
    for file in *; do
        if [ "$file" = "vendor" ]; then
            continue
        fi
        misspell -error -i auther "$file"
    done

    echo Checking for ineffective assignments
    if ! which ineffassign >/dev/null; then
        go get -u github.com/gordonklaus/ineffassign
    fi
    ineffassign .

    echo Checking for naked returns
    if ! which nakedret >/dev/null; then
        go get -u github.com/alexkohler/nakedret
    fi
    got=$(nakedret ./... 2>&1)
    if [ -n "$got" ]; then
        echo "$got"
        exit 1
    fi
fi

if [ ! -z "$UNIT" ]; then
    # Prepare the coverage output profile.
    rm -rf .coverage
    mkdir .coverage
    echo "mode: set" > .coverage/coverage.out

    echo Building
    go build -v ./...

    # tests
    echo Running tests from "$(pwd)"
    for pkg in $(go list ./...); do
        go test -v -coverprofile=.coverage/profile.out "$pkg"
        append_coverage .coverage/profile.out
    done

fi

UNCLEAN="$(git status -s|grep '^??')" || true
if [ -n "$UNCLEAN" ]; then
    cat <<EOF

There are files left in the git tree after the tests:

$UNCLEAN
EOF
    exit 1
fi
